//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: Contact_Dcps.h
//  Source: contact/msg/dds_opensplice/Contact_.idl
//  Generated: timestamp removed to make the build reproducible
//  OpenSplice 6.9.181126OSS
//  
//******************************************************************
#ifndef _CONTACT_DCPS_H_
#define _CONTACT_DCPS_H_

#include "sacpp_mapping.h"
#include "dds_dcps.h"
#include "Contact_.h"


namespace contact
{
   namespace msg
   {
      namespace dds_
      {

         class Contact_TypeSupportInterface;

         typedef Contact_TypeSupportInterface * Contact_TypeSupportInterface_ptr;
         typedef DDS_DCPSInterface_var < Contact_TypeSupportInterface> Contact_TypeSupportInterface_var;
         typedef DDS_DCPSInterface_out < Contact_TypeSupportInterface> Contact_TypeSupportInterface_out;


         class Contact_DataWriter;

         typedef Contact_DataWriter * Contact_DataWriter_ptr;
         typedef DDS_DCPSInterface_var < Contact_DataWriter> Contact_DataWriter_var;
         typedef DDS_DCPSInterface_out < Contact_DataWriter> Contact_DataWriter_out;


         class Contact_DataReader;

         typedef Contact_DataReader * Contact_DataReader_ptr;
         typedef DDS_DCPSInterface_var < Contact_DataReader> Contact_DataReader_var;
         typedef DDS_DCPSInterface_out < Contact_DataReader> Contact_DataReader_out;


         class Contact_DataReaderView;

         typedef Contact_DataReaderView * Contact_DataReaderView_ptr;
         typedef DDS_DCPSInterface_var < Contact_DataReaderView> Contact_DataReaderView_var;
         typedef DDS_DCPSInterface_out < Contact_DataReaderView> Contact_DataReaderView_out;

         struct Contact_Seq_uniq_ {};
         typedef DDS_DCPSUVLSeq < Contact_, struct Contact_Seq_uniq_> Contact_Seq;
         typedef DDS_DCPSSequence_var < Contact_Seq> Contact_Seq_var;
         typedef DDS_DCPSSequence_out < Contact_Seq> Contact_Seq_out;
         class Contact_TypeSupportInterface
         :
            virtual public DDS::TypeSupport
         { 
         public:
            typedef Contact_TypeSupportInterface_ptr _ptr_type;
            typedef Contact_TypeSupportInterface_var _var_type;

            static Contact_TypeSupportInterface_ptr _duplicate (Contact_TypeSupportInterface_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static Contact_TypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
            static Contact_TypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static Contact_TypeSupportInterface_ptr _nil () { return 0; }
            static const char * _local_id;
            Contact_TypeSupportInterface_ptr _this () { return this; }


         protected:
            Contact_TypeSupportInterface () {};
            ~Contact_TypeSupportInterface () {};
         private:
            Contact_TypeSupportInterface (const Contact_TypeSupportInterface &);
            Contact_TypeSupportInterface & operator = (const Contact_TypeSupportInterface &);
         };

         class Contact_DataWriter
         :
            virtual public DDS::DataWriter
         { 
         public:
            typedef Contact_DataWriter_ptr _ptr_type;
            typedef Contact_DataWriter_var _var_type;

            static Contact_DataWriter_ptr _duplicate (Contact_DataWriter_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static Contact_DataWriter_ptr _narrow (DDS::Object_ptr obj);
            static Contact_DataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static Contact_DataWriter_ptr _nil () { return 0; }
            static const char * _local_id;
            Contact_DataWriter_ptr _this () { return this; }

            virtual DDS::LongLong register_instance (const Contact_& instance_data) = 0;
            virtual DDS::LongLong register_instance_w_timestamp (const Contact_& instance_data, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long unregister_instance (const Contact_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long unregister_instance_w_timestamp (const Contact_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long write (const Contact_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long write_w_timestamp (const Contact_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long dispose (const Contact_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long dispose_w_timestamp (const Contact_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long writedispose (const Contact_& instance_data, DDS::LongLong handle) = 0;
            virtual DDS::Long writedispose_w_timestamp (const Contact_& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
            virtual DDS::Long get_key_value (Contact_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const Contact_& instance_data) = 0;

         protected:
            Contact_DataWriter () {};
            ~Contact_DataWriter () {};
         private:
            Contact_DataWriter (const Contact_DataWriter &);
            Contact_DataWriter & operator = (const Contact_DataWriter &);
         };

         class Contact_DataReader
         :
            virtual public DDS::DataReader
         { 
         public:
            typedef Contact_DataReader_ptr _ptr_type;
            typedef Contact_DataReader_var _var_type;

            static Contact_DataReader_ptr _duplicate (Contact_DataReader_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static Contact_DataReader_ptr _narrow (DDS::Object_ptr obj);
            static Contact_DataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static Contact_DataReader_ptr _nil () { return 0; }
            static const char * _local_id;
            Contact_DataReader_ptr _this () { return this; }

            virtual DDS::Long read (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (Contact_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (Contact_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (Contact_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const Contact_& instance) = 0;

         protected:
            Contact_DataReader () {};
            ~Contact_DataReader () {};
         private:
            Contact_DataReader (const Contact_DataReader &);
            Contact_DataReader & operator = (const Contact_DataReader &);
         };

         class Contact_DataReaderView
         :
            virtual public DDS::DataReaderView
         { 
         public:
            typedef Contact_DataReaderView_ptr _ptr_type;
            typedef Contact_DataReaderView_var _var_type;

            static Contact_DataReaderView_ptr _duplicate (Contact_DataReaderView_ptr obj);
            DDS::Boolean _local_is_a (const char * id);

            static Contact_DataReaderView_ptr _narrow (DDS::Object_ptr obj);
            static Contact_DataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
            static Contact_DataReaderView_ptr _nil () { return 0; }
            static const char * _local_id;
            Contact_DataReaderView_ptr _this () { return this; }

            virtual DDS::Long read (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_w_condition (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_w_condition (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long read_next_sample (Contact_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long take_next_sample (Contact_& received_data, DDS::SampleInfo& sample_info) = 0;
            virtual DDS::Long read_instance (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_instance (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long take_next_instance (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
            virtual DDS::Long read_next_instance_w_condition (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long take_next_instance_w_condition (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
            virtual DDS::Long return_loan (Contact_Seq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
            virtual DDS::Long get_key_value (Contact_& key_holder, DDS::LongLong handle) = 0;
            virtual DDS::LongLong lookup_instance (const Contact_& instance) = 0;

         protected:
            Contact_DataReaderView () {};
            ~Contact_DataReaderView () {};
         private:
            Contact_DataReaderView (const Contact_DataReaderView &);
            Contact_DataReaderView & operator = (const Contact_DataReaderView &);
         };

      }
   }
}




#endif
